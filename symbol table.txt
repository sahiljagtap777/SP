#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct Symbol {
    char name[50];
    char type[50];
    int size;
    int dimension;
    int address;
};


int is_data_type(char *token) {   //Checks if a given token is a valid C data type (int, float, char, short, long, double, or binary).
    char *data_types[] = {"int", "float", "char", "short", "long", "double", "binary"};
    for (int i = 0; i < sizeof(data_types) / sizeof(data_types[0]); i++) {
        if (strcmp(token, data_types[i]) == 0) {
            return 1;
        }
    }
    return 0;
}



typedef struct {
    char type[10];
    int size;
} DataTypeSize;

int get_size(char *data_type) {
    DataTypeSize typeSizes[] = {
        {"char", 1},
        {"short", 2},
        {"int", 4},
        {"float", 4},
        {"long", 8},
        {"binary", 8},
        {"double", 8}
    };

    int numTypes = sizeof(typeSizes) / sizeof(typeSizes[0]);

    for (int i = 0; i < numTypes; ++i) {
        if (strcmp(data_type, typeSizes[i].type) == 0) {
            return typeSizes[i].size;
        }
    }

    return 0; // Return 0 for unknown types.
}



void extract_symbols(char *code, struct Symbol symbols[], int *symbol_count) {
    char *token = strtok(code, " \t\n\r(),;{}");
    int line_num = 1;

    char current_data_type[50] = "";

    while (token != NULL) {
        if (is_data_type(token)) {
            strcpy(current_data_type, token);
        } else if (strlen(current_data_type) > 0) {
            if (isalpha(token[0]) || token[0] == '_') {
                struct Symbol symbol = {
                    .dimension = 0,
                    .address = 0, 
                };

                strcpy(symbol.name, token);
                strcpy(symbol.type, current_data_type);

                //for array
                char *array_start = strchr(token, '[');
                if (array_start != NULL) {
                    sscanf(array_start, "[%d]", &symbol.dimension);
                    symbol.size = symbol.dimension * get_size(current_data_type);
                } else {
                    symbol.size = get_size(current_data_type);
                }

                symbols[*symbol_count] = symbol;
                (*symbol_count)++;
            }

            // Reset data type after processing
            current_data_type[0] = '\0';
        }

        token = strtok(NULL, " \t\n\r(),;{}");
        line_num++;
    }
}


void generate(char *input_file, struct Symbol symbols[], int *symbol_count) {
    FILE *file = fopen(input_file, "r");

    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    fseek(file, 0, SEEK_SET);

    char *code = (char *)malloc(file_size + 1);  
    fread(code, 1, file_size, file);
    code[file_size] = '\0';

    fclose(file);

    extract_symbols(code, symbols, symbol_count);

    int current_address = 1000;

    for (int i = 0; i < *symbol_count; i++) {
        symbols[i].address = current_address;
        current_address += symbols[i].size;
    }
    free(code);
}

// Function to display the symbol table
void display(struct Symbol symbols[], int symbol_count) {
    
    printf("| Name      | Type        | Size   | Dimension   | Address   |\n");
   

    for (int i = 0; i < symbol_count; i++) {
        printf("| %-6s    | %-10s  | %-6d | %-11d | %-8d |\n",
               symbols[i].name,
               symbols[i].type,
               symbols[i].size,
               symbols[i].dimension,
               symbols[i].address);
    }


}

int main() {
    char input_file[] = "input1.txt";
    struct Symbol symbols[100];
    int symbol_count = 0;

    generate(input_file, symbols, &symbol_count);
    display(symbols, symbol_count);

    return 0;
}


input code:

#include <stdio.h>
void main() {   
    int num;
    int ar[30];
    float sahil;
    char w[50];
    long x;
    printf("what is your age: ");  
    scanf("%d", &num);
    printf("the age is: %d", number);
}